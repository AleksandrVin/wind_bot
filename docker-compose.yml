services:
  db:
    image: postgres:17-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-wind_bot_db}
    ports:
      - "5432:5432" # Expose for local access
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-wind_bot_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379" # Expose for local access
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app_base: &app_base
    build: .
    env_file:
      - .env # Load environment variables from .env file
    environment:
      # Use asyncpg driver and point to the 'db' service
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-wind_bot_db}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - .:/app # Mount current directory for development hot-reloading

  # Database initialization service
  db_init:
    <<: *app_base
    restart: "no"
    # Run as a module for correct path resolution
    command: python -m init_db
    depends_on:
      db:
        condition: service_healthy

  web:
    <<: *app_base
    command: uvicorn interfaces.web.app:app --host 0.0.0.0 --port 5000 --reload
    ports:
      - "5000:5000"
    depends_on:
      db_init:
        condition: service_completed_successfully

  bot:
    <<: *app_base
    command: python run_bot.py
    depends_on:
      db_init:
        condition: service_completed_successfully

  worker:
    <<: *app_base
    command: celery -A tasks worker --loglevel=info --concurrency=1
    depends_on:
      db_init:
        condition: service_completed_successfully

  beat:
    <<: *app_base
    command: celery -A tasks beat --loglevel=info
    depends_on:
      db_init:
        condition: service_completed_successfully

volumes:
  postgres_data:

# Note: For production (e.g., Kubernetes), you'd typically:
# - Remove the volume mount for code (.:/app) and rely on the built image.
# - Not expose db/redis ports directly.
# - Use managed database and Redis services.
# - Handle secrets securely (e.g., Kubernetes Secrets).
# - Use a more robust healthcheck for the app services.
# - Adjust resource limits.
# - The `django_celery_beat.schedulers:DatabaseScheduler` for beat assumes you are using django-celery-beat. Adjust if using a different scheduler. 
